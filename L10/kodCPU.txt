%%cu
#include <stdio.h>
#include <iostream>
#include <math.h>
#include <chrono> 

using namespace std;
double func(double x){
  return (x*x + 5.2)/(sin(0.5+0.1*x*x));
}

double metodaProstokatow(double a, double b, int N){  
  double delta = (b - a) / N;
  double suma = 0, wynik;
	for (int i = 0; i < N; i++){
	  suma += delta * func(a + delta*(i + 0.5));
	}
	wynik = suma;
  return wynik;
}

double metodaTrapezow(double a, double b, int n){  
  double wynik = 0;
  double delta = (b - a) / n;
  int i;
  for(i = 1; i <= n-1; i++){
    wynik += func(a + i * delta);
  }
  wynik += (func(a) + func(b)) / 2;
  wynik *= delta;
  return wynik;
}
double metodaSimpsona(double a, double b, int n){   
  double delta = (b - a) / n, s, wynik, x;
  wynik = 0;
  s = 0;
  for (int i = 1; i < n; i++){
    x = a + i * delta;
    s += func(x - delta / 2);
    wynik += func(x);
  }
  s += func(b - delta / 2);
  wynik = (delta / 6) * (func(a) + func(b) + 2 * wynik + 4 * s);

  return wynik;
}

int main(){
  double a = 1;
  double b = 4;
  int n = 10000;  
  auto begin = std::chrono::high_resolution_clock::now();
  double Prostokat = metodaProstokatow(a, b, n);
  double Trapez = metodaTrapezow(a, b, n); 
  double Simpson = metodaSimpsona(a, b, n);
  cout << "Wynik Metoda Prostokat: " << Prostokat << endl;
  cout << "Wynik Metoda Trapez: " << Trapez << endl;
  cout << "Wynik Metoda Simspon: " << Simpson << endl;
  //stop czas
  auto end = std::chrono::high_resolution_clock::now();
  auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
  printf("Czas wykonania: %.3f seconds.\n", elapsed.count() * 1e-9);

  return 0;
}